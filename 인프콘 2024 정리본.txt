인프콘 2024 정리본

발표: 우당탕탕 신입 PM 성장기(우아한형제들)
1. 무의식적인 사용성을 캐치하자
- 서비스를 직접 사용해보거나, 사용자가 직접 사용하는 모습 혹은 유저플로우를 보면 무의식적인 사용성을 볼 수 있다. 
- 예시) 사용자가 페이지를 평균적으로 어느 정도까지 스크롤하는지, 가장 많이 클릭하는 영역이 어디인지 등
2. 기획 앞단을 탄탄하게 하라
3. 팀에 부족한 부분을 찾고, 내가 할 수 있는 일을 찾는 것
4. PM은 고객 우선, 그러나 고객만 대변하면 안됨
- PM은 고객 우선으로 업무를 진행해야 하나, 동시에 개발자 디자이너 등 이해관계자도 고려해야함을 명심해야 한다.

발표: 실리콘밸리 개발 문화 및 서바이벌 전략(애플)
1. 기술 관련 뉴스 사이트: TechCrunch, Bytebytego
2. 파레토법칙(80:20 법칙이라고도 불리는데, 80%의 결과가 20%의 원인에 의해 발생한다는 것)
-  20%의 핵심 기능에 집중하여 개발, 제한된 자원을 최대한 효율적으로 활용할 수 있다. 
- 예시) 버그를 처리 할 때, 사용자에게 가장 큰 영향을 미치는 상위 20%의 버그를 먼저 수정
3. 자기 분야에 대한 독보적인 기술을 가져라
- 특정한 전문성을 갖추어 자신만의 강점을 구축해야한다.
- 예시) 프레임워크, 라이브러리, 성능 최적화, 디자인 시스템, 테스트 등

발표: 경력이 늘수록 CS이론이 중요해지는 이유(널널한 개발자 TV)
1. 암기와 이해의 경계
- 이해를 위해선 일정 수준의 암기는 불가피하다. CS를 공부할 때, 이러한 경계를 잘 이해해야 한다. 일정 수준의 암기 없이 이해하는 것은 불가능하다. 만약에 단순히 보는 것만으로 이해했다고 생각한다면 그 이론을 설명할 수 있는지 확인해보는 방법이 있다.
2. 한번에 이해 가능한 CS는 없다, 결국 반복 학습
- 경력이 쌓이고 반복 되면서 접하게 되는 개념은 자연스럽게 머리에 들어오게 된다. 그러나 한 두 번만 익힌 개념은 시간이 지나면 잊혀진다. 결국 반복 학습을 해야하는 것이다.
3. 어떻게든 하루 2시간을 만들어 자기개발을 하라

발표: 멀티패러다임 프로그래밍 언어의 시대: 객체지향과 함수형을 섞어야할 때!(마플코퍼레이션)
1. 멀티패러다임 프로그래밍
- 함수형과 절차형, 객체 지향 모두 활용하는 것을 말한다. 
- 예시) 외부에서 공격이 들어와서 html 코드에 접근하려고 할 때, 이스케이프를 사용해서 막음 -> 그러나 개발자 코드까지 이스케이프 함 -> 이를 해결하기 위해 클래스와 메서드를 활용(instanceof와 삼항 연산자를 결합하여 요소를 구분하고 동작을 수행 ```val instanceof HTMLElement ? HTML case : non-HTML case```
2. 구조의 문제는 객체지향으로, 로직의 문제는 함수형으로 해결하라
- 각 패러다임의 장점을 최대한 활용하는 접근 방식

발표: 달리는 기차의 바퀴 갈아끼우기: 인프런 프론트엔드 마이그레이션 여정
1. 마이그레이션에 적합한 쿠키 기반 '기능 플래그' 활용
- 가상 DOM을 기존 코드에 통합하고, JavaScript 파일을 호출하여 빌드 및 렌더링을 진행한다. 기능 플래그가 꺼져 있을 때는 기존 코드를 사용하고, 켜져 있을 때는 새로운 코드를 호출하는 방식으로 구현한다. 
- 장점:  QA와 테스트 등에서 기능을 분리하여 구현할 수 있다.
- 단점:  코드의 on/off 상태를 두 가지로 관리해야 하고 배포 후 정리 작업이 필요하다.
2. 레거시 스타일 침범 발생 문제 해결 방법
a) !important사용, 최악의 방법
b) sass meta.load-css(@import 또는 @use)
c) 전역 스타일에서 문제라면 shadow DOM을 통해서 스타일 격리(react-shadow 라이브러리), 최초 채택안
d) 공용 컴포넌트화, 최종 채택안
3. JS 로드를 위한 shell script를 GPT로 작성했는데, 유지보수가 안되는 문제 발생
- version.json을 menifest.json로 대체(파일의 경로, 해시값, 버전 등 다양한 정보를 관리)
4. Module Federation을 통해 애플리케이션이 공용 라이브러리를 업데이트하지 않고도 서로의 코드를 동적으로 로드하고 사용
- 예시) A 앱에서 B 앱의 코드를 불러올 수 있고 이 반대 상황도 가능

패널토크: 소수 인원으로 글로벌 1위 앱 서비스를 만든 비결(딜라이트룸)
- 목표가 명확히 설정되고, 5초인에 답할 수 있을 정도가 되어야 한다
- 고객의 행복을 최우선, 악평이나 악플을 성장할 가능성으로 생각하라
- 좋은게 좋은거지~ 는 나쁜거지: 비핀적인 관점을 가지자

발표: 지난 4년간 6번의 무진장 행사를 통해 성장한 DevOps 이야기(무신사)
- 트래픽 증가할 때 보통 서버 scale out으로 커버가 되지만, 일정 수준을 벗어나면 scale up이 불가피하다. scale up이 더 비용이 많이 든다.
- 서버 스펙이 높아도 포트수는 똑같기 때문에 트래픽이 밀릴 수 있다는 점을 고려해야한다.
- 트래픽이 늘어나는데 리소스 사용량이 줄어드는 아이러니한 상황이 발생하기도 한다. 이는 캐시의 존재, 기능플래그의 사용, 쿠폰 사용이나 수량 등의 변수 때문이다.
- 비용이 많이 나오더라도 안전하게 오버프로비져닝을 하는 것이 낫다.
- 원인 파악보다 문제 해결이 우선이다. 코드만 보고 있는 것이 아니라 서버를 내리거나 증설하는 다양한 방법을 고려해야한다. 원인 분석은 급한 불부터 끄고 진행하자.